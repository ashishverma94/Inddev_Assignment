openapi: 3.0.3
info:
  title: Inddev Backend Assignment
  description: APIs for managing user data in a MongoDB database
  version: 1.0.0
servers:
  - url: http://localhost:3000/api  # Replace with your server URL
paths:
  /users:
    get:
      summary: Get all users
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            minimum: 1
            default: 1
          description: Page number for pagination
        - in: query
          name: limit
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 5
          description: Number of items per page
        - in: query
          name: search
          schema:
            type: string
          description: Search users by first name or last name (case-insensitive)
        - in: query
          name: sort
          schema:
            type: string
          description: Sort users by field (-field for descending order)
      responses:
        '200':
          description: A list of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
    post:
      summary: Create a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewUser'
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Bad request, validation error or duplicate email
        '500':
          description: Internal server error
  /users/{id}:
    get:
      summary: Get user by ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: User ID
      responses:
        '200':
          description: User found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found
        '400':
          description: Invalid user ID
        '500':
          description: Internal server error
    put:
      summary: Update user by ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: User ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUser'
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Bad request, validation error or invalid input
        '404':
          description: User not found
        '500':
          description: Internal server error
    delete:
      summary: Delete user by ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: User ID
      responses:
        '204':
          description: User deleted successfully
        '404':
          description: User not found
        '400':
          description: Invalid user ID
        '500':
          description: Internal server error
components:
  schemas:
    User:
      type: object
      properties:
        _id:
          type: string
        first_name:
          type: string
        last_name:
          type: string
        company_name:
          type: string
        age:
          type: integer
        city:
          type: string
        state:
          type: string
        zip:
          type: string
        email:
          type: string
        web:
          type: string
    NewUser:
      type: object
      properties:
        first_name:
          type: string
        last_name:
          type: string
        company_name:
          type: string
        age:
          type: integer
        city:
          type: string
        state:
          type: string
        zip:
          type: string
        email:
          type: string
        web:
          type: string
    UpdateUser:
      type: object
      properties:
        first_name:
          type: string
        last_name:
          type: string
        company_name:
          type: string
        age:
          type: integer
        city:
          type: string
        state:
          type: string
        zip:
          type: string
        email:
          type: string
        web:
          type: string
